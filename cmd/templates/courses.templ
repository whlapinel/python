package templates

import (
	"gh_static_portfolio/cmd/domain"
	"strconv"
)

templ CourseDivContainer() {
	<div class="p-4 flex gap-3 flex-col md:flex-row">
		{ children... }
	</div>
}

templ CourseUnorderedList() {
	<ul class="max-w-fit min-w-fit">
		{ children... }
	</ul>
}

func targetAttrVal(newTab bool) string {
	if newTab {
		return "_blank"
	}
	return "_self"
}

templ ListedLinkItem(path string, newTab bool) {
	<a href={ templ.SafeURL(path) } target={ targetAttrVal(newTab) }>
		<li class="bg-purple-600 rounded p-2 m-1 text-lg hover:bg-purple-500">
			{ children... }
		</li>
	</a>
}

templ BackButton(path, text string) {
	<a href={ templ.SafeURL(path) }>
		<li class="flex gap-2 text-lg mb-10 items-center bg-green-600 p-3 rounded hover:bg-green-500">
			<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="m313-440 224 224-57 56-320-320 320-320 57 56-224 224h487v80H313Z"></path></svg>
			<p>Back to { text }</p>
		</li>
	</a>
}

templ TitleDiv(title, description, path string) {
	<div class="flex flex-col gap-6 max-w-3xl">
		<h1 class=" text-4xl">{ title }</h1>
		<p class="text-2xl">{ description }</p>
		if hasImage(path) {
			<img src={ "./image.png" } class="max-w-full h-auto rounded border border-solid border-purple-400"/>
		}
	</div>
}

templ CoursesListComponent(courses []domain.Course) {
	@Layout(NewCoursesListPage(nil)) {
		@CourseDivContainer() {
			@CourseUnorderedList() {
				for _, course := range courses {
					@ListedLinkItem(RemoveDocsFromPath(courseRoutePath(course))+FileName(course), false) {
						<p>{ course.Title() }</p>
					}
				}
			}
			@TitleDiv("Python Courses at Phillip O. Berry Academy of Technology", "This section is for students of Python I and II at Phillip O. Berry Academy of Technology. Included are links to all course slides, files and other resources. All assignments must be submitted via Canvas.", rootDir)
		}
	}
}

templ CourseComponent(course domain.Course) {
	@Layout(&page{title: "Course"}) {
		@CourseDivContainer() {
			@CourseUnorderedList() {
				@BackButton("/courses.html", "Course List")
				for _, unit := range course.Units {
					@ListedLinkItem(RemoveDocsFromPath(unitRoutePath(unit, course)+FileName(unit)), false) {
						<strong>Unit { strconv.Itoa(unit.Number) }:</strong> { unit.Description }
					}
				}
			}
			@TitleDiv(course.Title(), course.Description, courseRoutePath(course))
		}
	}
}

templ UnitComponent(unit domain.Unit, course domain.Course) {
	@Layout(&page{title: course.Title()}) {
		@CourseDivContainer() {
			@CourseUnorderedList() {
				@BackButton(RemoveDocsFromPath(courseRoutePath(course))+FileName(course), course.Title())
				for _, lesson := range unit.Lessons {
					@ListedLinkItem(RemoveDocsFromPath(lessonRoutePath(lesson, unit, course)+FileName(lesson)), false) {
						<strong>Lesson { strconv.Itoa(lesson.Number) }:</strong> { lesson.Description }
					}
				}
			}
			@TitleDiv(unit.Title(), unit.Description, unitRoutePath(unit, course))
		}
	}
}

templ LessonComponent(lesson domain.Lesson, unit domain.Unit, course domain.Course) {
	@Layout(&page{title: course.Title()}) {
		@CourseDivContainer() {
			@CourseUnorderedList() {
				@BackButton(RemoveDocsFromPath(unitRoutePath(unit, course))+FileName(unit), unit.Title())
				if hasSlides(lessonRoutePath(lesson, unit, course)) {
					@ListedLinkItem(RemoveDocsFromPath(lessonRoutePath(lesson, unit, course)+"slides.html"), true) {
						Slides
					}
				} else {
					<p>No content for this lesson yet!</p>
				}
				if hasFilesDir(filesRoutePath(lesson, unit, course)) {
					@ListedLinkItem(filesRoutePath(lesson, unit, course), true)
				}
			}
			@TitleDiv(lesson.Title(), lesson.Description, lessonRoutePath(lesson, unit, course))
		}
	}
}
