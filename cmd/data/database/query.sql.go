// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const deleteCourse = `-- name: DeleteCourse :one
DELETE FROM courses WHERE id = ?
RETURNING id, name, description
`

func (q *Queries) DeleteCourse(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, deleteCourse, id)
	var i Course
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCourseInstance = `-- name: DeleteCourseInstance :one
DELETE FROM course_instances WHERE id = ?
RETURNING id, course_id, term_id
`

func (q *Queries) DeleteCourseInstance(ctx context.Context, id int64) (CourseInstance, error) {
	row := q.db.QueryRowContext(ctx, deleteCourseInstance, id)
	var i CourseInstance
	err := row.Scan(&i.ID, &i.CourseID, &i.TermID)
	return i, err
}

const deleteLesson = `-- name: DeleteLesson :one
DELETE FROM lessons WHERE id = ?
RETURNING id, unit_id, number, name, description, date
`

func (q *Queries) DeleteLesson(ctx context.Context, id int64) (Lesson, error) {
	row := q.db.QueryRowContext(ctx, deleteLesson, id)
	var i Lesson
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.Number,
		&i.Name,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const deleteNonInstructDays = `-- name: DeleteNonInstructDays :one
DELETE FROM non_instruct_days WHERE id = ?
RETURNING id, term_id, date
`

func (q *Queries) DeleteNonInstructDays(ctx context.Context, id int64) (NonInstructDay, error) {
	row := q.db.QueryRowContext(ctx, deleteNonInstructDays, id)
	var i NonInstructDay
	err := row.Scan(&i.ID, &i.TermID, &i.Date)
	return i, err
}

const deleteTerm = `-- name: DeleteTerm :one
DELETE FROM terms WHERE id = ?
RETURNING id, name, start, "end"
`

func (q *Queries) DeleteTerm(ctx context.Context, id int64) (Term, error) {
	row := q.db.QueryRowContext(ctx, deleteTerm, id)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Start,
		&i.End,
	)
	return i, err
}

const deleteUnit = `-- name: DeleteUnit :one
DELETE FROM units WHERE id = ?
RETURNING id, course_id, instance_id, number, name, description
`

func (q *Queries) DeleteUnit(ctx context.Context, id int64) (Unit, error) {
	row := q.db.QueryRowContext(ctx, deleteUnit, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.InstanceID,
		&i.Number,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getCourses = `-- name: GetCourses :many
SELECT
  c.id as course_id,
  c.name as course_name,
  c.description as course_description,
  u.number as unit_number,
  u.name as unit_name,
  l.number as lesson_number,
  l.name as lesson_name
FROM
  courses c
JOIN
  units u ON u.course_id = c.id AND u.instance_id = NULL
JOIN
  lessons l ON l.unit_id = u.id
`

type GetCoursesRow struct {
	CourseID          int64
	CourseName        string
	CourseDescription sql.NullString
	UnitNumber        int64
	UnitName          string
	LessonNumber      int64
	LessonName        sql.NullString
}

func (q *Queries) GetCourses(ctx context.Context) ([]GetCoursesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesRow
	for rows.Next() {
		var i GetCoursesRow
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseName,
			&i.CourseDescription,
			&i.UnitNumber,
			&i.UnitName,
			&i.LessonNumber,
			&i.LessonName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveCourse = `-- name: SaveCourse :one
INSERT INTO courses (
  name, description
) VALUES (
  ?, ?
)
RETURNING id, name, description
`

type SaveCourseParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) SaveCourse(ctx context.Context, arg SaveCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, saveCourse, arg.Name, arg.Description)
	var i Course
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const saveCourseInstance = `-- name: SaveCourseInstance :one
INSERT INTO course_instances (
  course_id, term_id
) VALUES (
  ?, ?
)
RETURNING id, course_id, term_id
`

type SaveCourseInstanceParams struct {
	CourseID int64
	TermID   int64
}

func (q *Queries) SaveCourseInstance(ctx context.Context, arg SaveCourseInstanceParams) (CourseInstance, error) {
	row := q.db.QueryRowContext(ctx, saveCourseInstance, arg.CourseID, arg.TermID)
	var i CourseInstance
	err := row.Scan(&i.ID, &i.CourseID, &i.TermID)
	return i, err
}

const saveLesson = `-- name: SaveLesson :one
INSERT INTO lessons (
  number, name, description, unit_id, date
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, unit_id, number, name, description, date
`

type SaveLessonParams struct {
	Number      int64
	Name        sql.NullString
	Description sql.NullString
	UnitID      int64
	Date        sql.NullString
}

func (q *Queries) SaveLesson(ctx context.Context, arg SaveLessonParams) (Lesson, error) {
	row := q.db.QueryRowContext(ctx, saveLesson,
		arg.Number,
		arg.Name,
		arg.Description,
		arg.UnitID,
		arg.Date,
	)
	var i Lesson
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.Number,
		&i.Name,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const saveTerm = `-- name: SaveTerm :one
INSERT INTO terms (
  name, start, end
) VALUES (
  ?, ?, ?
)
RETURNING id, name, start, "end"
`

type SaveTermParams struct {
	Name  string
	Start string
	End   string
}

func (q *Queries) SaveTerm(ctx context.Context, arg SaveTermParams) (Term, error) {
	row := q.db.QueryRowContext(ctx, saveTerm, arg.Name, arg.Start, arg.End)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Start,
		&i.End,
	)
	return i, err
}

const saveUnit = `-- name: SaveUnit :one
INSERT INTO units (
  number, name, description, course_id, instance_id
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, course_id, instance_id, number, name, description
`

type SaveUnitParams struct {
	Number      int64
	Name        string
	Description sql.NullString
	CourseID    int64
	InstanceID  sql.NullInt64
}

func (q *Queries) SaveUnit(ctx context.Context, arg SaveUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, saveUnit,
		arg.Number,
		arg.Name,
		arg.Description,
		arg.CourseID,
		arg.InstanceID,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.InstanceID,
		&i.Number,
		&i.Name,
		&i.Description,
	)
	return i, err
}
