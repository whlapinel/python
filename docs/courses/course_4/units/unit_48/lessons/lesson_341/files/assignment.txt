# Copy and paste this into a python file. It's only in .txt because students' browsers may block downloading python files.

# Python Practice: Basic Python Constructs
# For each problem, write a function that meets the requirements specified. Use the assert statements to test your code by uncommenting them.

# 1. 'sum_until': Return the sum of numbers from 1 to n (inclusive)
# Accepts an integer n
# Returns an integer

# assert sum_until(5) == 15  # 1 + 2 + 3 + 4 + 5
# assert sum_until(0) == 0

# 2. 'count_odd_numbers': Count the number of odd numbers in a list
# Accepts a list of integers
# Returns an integer

# assert count_odd_numbers([1, 2, 3, 4, 5]) == 3
# assert count_odd_numbers([2, 4, 6]) == 0

# 3. 'factors': Return a list of all factors of a number
# Accepts an integer n
# Returns a list of integers

# assert factors(12) == [1, 2, 3, 4, 6, 12]
# assert factors(7) == [1, 7]

# 4. 'find_max': Return the maximum number in a list
# Accepts a list of integers
# Returns an integer

# assert find_max([1, 2, 3, 4, 5]) == 5
# assert find_max([10, 3, 7]) == 10

# 5. 'count_vowels': Count the number of vowels in a string
# Accepts a string
# Returns an integer

# assert count_vowels("hello") == 2
# assert count_vowels("xyz") == 0

# 6. 'first_even': Return the first even number in a list (or None if no even number exists)
# Accepts a list of integers
# Returns an integer or None

# assert first_even([1, 3, 5, 8]) == 8
# assert first_even([1, 3, 5]) == None

# 7. 'reverse_list': Return a reversed list using a for loop
# Accepts a list
# Returns a list

# assert reverse_list([1, 2, 3]) == [3, 2, 1]
# assert reverse_list([]) == []

# 8. 'count_until': Count how many numbers are encountered in a list until a given number is found
# Accepts a list of integers and a target number
# Returns an integer

# assert count_until([1, 2, 3, 4], 3) == 2
# assert count_until([1, 2, 3, 4], 5) == 4

# 9. 'contains_negative': Check if a list contains any negative numbers
# Accepts a list of integers
# Returns a boolean

# assert contains_negative([1, -2, 3]) == True
# assert contains_negative([1, 2, 3]) == False

# 10. 'sum_of_evens': Return the sum of all even numbers in a list
# Accepts a list of integers
# Returns an integer

# assert sum_of_evens([1, 2, 3, 4]) == 6
# assert sum_of_evens([1, 3, 5]) == 0
