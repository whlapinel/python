# Copy and paste this into a python file. It's only in .txt because students' browsers may block downloading python files.

# Assignment 10.2

# Python Practice: Working with List Comprehensions
# For each problem, write a function that meets the requirements specified. Use the assert statements to test your code by uncommenting them.

# 1. 'squares': Return a list of the squares of all numbers in a list
# Accepts a list of integers
# Returns a list of integers

# assert squares([1, 2, 3, 4]) == [1, 4, 9, 16]
# assert squares([]) == []

# 2. 'evens': Return a list of all even numbers in a list
# Accepts a list of integers
# Returns a list of integers

# assert evens([1, 2, 3, 4, 5]) == [2, 4]
# assert evens([]) == []

# 3. 'uppercase_strings': Convert all strings in a list to uppercase
# Accepts a list of strings
# Returns a list of strings

# assert uppercase_strings(["hello", "world"]) == ["HELLO", "WORLD"]
# assert uppercase_strings([]) == []

# 4. 'filter_short_strings': Return a list of strings with length less than 4
# Accepts a list of strings
# Returns a list of strings

# assert filter_short_strings(["cat", "house", "a", "dog"]) == ["cat", "a", "dog"]
# assert filter_short_strings([]) == []

# 5. 'lengths_of_strings': Return a list of the lengths of strings in a list
# Accepts a list of strings
# Returns a list of integers

# assert lengths_of_strings(["apple", "banana", "cherry"]) == [5, 6, 6]
# assert lengths_of_strings([]) == []

# 6. 'filter_non_negative': Return a list of non-negative numbers
# Accepts a list of integers
# Returns a list of integers

# assert filter_non_negative([-1, 0, 5, -3]) == [0, 5]
# assert filter_non_negative([]) == []

# 7. 'double_numbers': Return a list where each number is doubled
# Accepts a list of integers
# Returns a list of integers

# assert double_numbers([1, 2, 3]) == [2, 4, 6]
# assert double_numbers([]) == []

# 8. 'filter_and_square_evens': Return the squares of all even numbers
# Accepts a list of integers
# Returns a list of integers

# assert filter_and_square_evens([1, 2, 3, 4]) == [4, 16]
# assert filter_and_square_evens([]) == []

# 9. 'reverse_strings': Return a list of all strings reversed
# Accepts a list of strings
# Returns a list of strings

# assert reverse_strings(["abc", "def"]) == ["cba", "fed"]
# assert reverse_strings([]) == []

# 10. 'extract_digits': Extract all digits from a list of strings
# Accepts a list of strings
# Returns a list of integers

# assert extract_digits(["a1", "b2", "c3"]) == [1, 2, 3]
# assert extract_digits([]) == []
